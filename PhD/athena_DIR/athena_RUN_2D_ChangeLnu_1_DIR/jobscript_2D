#!/bin/bash
#SBATCH --account=PAS2229
#SBATCH --time=3:00:00
#SBATCH --job-name=athena
#SBATCH --nodes=7
#SBATCH --ntasks=256
#SBATCH --mail-type=ALL
#SBATCH --export=ALL
#SBATCH --open-mode=append

module load intel/18.0.3
module load intelmpi/2019.7
module load hdf5
module load miniconda3
unset I_MPI_PMI_LIBRARY
set -x
cd $SLURM_SUBMIT_DIR

conda create -n hdf5 python=3.9.7 hdf5=1.10.6 h5py=3.6.0
conda create -n conda_env
source activate conda_env
conda activate hdf5
conda install mpi4py
conda install numpy
conda install hdf5
conda install matplotlib
conda install scipy
conda install -c conda-forge moviepy

###################################################
### SPECIFY THESE INPUTS BEFORE SUBMITTING JOB ####
###################################################
Lnu=(42 44 46)
Mdot=0.7
Mach=2.0
RPNS=30          # Integer format (in km) for R_PNS, used for directory names
rMin=3.0e6       # float format (in cm) for R_PNS, used in calculations
RPNS30km=true    # 'true' uses the R_PNS = 30km datasets from 1D_OUTPUT_DIR, 'false' selects data from the 1D_OUTPUT_RPNS_DIR directory
tmax=7.5e-1 #7.5e-1
d_t=3.75e-3 #3.75e-3
endfnumber=00200 # output file number format obtained from calculating tmax/d_t
nRank=200 #200   # Must be <= ntasks, used for python plot script, typically = maxI +1
minI=0
maxI=199 #199    # Must be a number such that (maxI-minI+1)/nRanks = INT (usually given by tmax/d_t - 1)
filenumber=00100 # file number of data to be used to create IC
compile=true     # true = compile code, false = use existing executable.
pgen=accretion_SingleNR_FixedKappa_2D #accretion_SimpleOuterBCs
dataDIR1=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/2D_OUTPUT_DIR
dataDIR1_RPNS=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/2D_OUTPUT_RPNS_DIR
dataDIR_Mach=Mach_${Mach}_DIR
dataDIR_Mdot=Mdot_${Mdot}_DIR
dataDIR_RPNS=RPNS_${RPNS}_DIR

###################################################
### COMPILE OPTIONS ###############################
###################################################
if ${compile}; then
	echo 'Compiling new executable...'
	python configure.py --prob ${pgen} --eos general/helmholtz_gamma_etot --coord spherical_polar --nscalars 2 -h5double -mpi -hdf5 --hdf5_path=${HDF5_HOME}
	make clean
	make
else
	echo 'Using existing executable in bin/'
fi
###################################################
### MORE INPUT PARAMETERS #########################
###################################################
rMin=3.0e6
rMax=1.0e8
SrMax=2.0e7  # Rmax for entropy/vr plot
nR=256
nTheta=128
nCell_r=16
nCell_theta=8
cores=256 # cores = (nR * nTheta ) / (nCell_r * nCell_theta)
imod_input=4  # cut off this many indices at beginning and end when finding shock
OUT_DIR=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/2D_OUTPUT_DIR
athinput=athinput.accretion_auto
txtfile_DIR=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/athena_RUN_2D_ChangeLnu_1_DIR/ICfiles_DIR
outputfile_DIR=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/athena_RUN_2D_ChangeLnu_1_DIR/out_DIR
jobscript=jobscript_2D.txt
eos_dir=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/athena_RUN_2D_ChangeLnu_1_DIR/helm_table.dat
pythondir=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/athena_RUN_2D_ChangeLnu_1_DIR/vis/python

echo 'clear ICfiles_DIR'
rm -rf ${txtfile_DIR}/*
echo 'clear out_DIR'
rm -rf out_DIR/slurm*
echo 'mv slurm* out_DIR/'
mv slurm* ${outputfile_DIR}/
echo 'remove old gifs'
rm -rf *.gif
echo 'remove old data directories'
rm -rf OUTPUT_*
echo 'remove text files'
rm -rf *.txt

####################################################
### RUNNING ATHENA #################################
####################################################

index=1
while [ ${index} -le ${#Lnu[@]} ]
do
	echo "---------------------------------------------------------"
	echo Lnu = ${Lnu[index-1]}
	echo "---------------------------------------------------------"
	dataDIR_Lnu=Lnu_${Lnu[index-1]}_DIR
	DIR=OUTPUT_2D_HEOS_QWMod_Lnu_${Lnu[index-1]}e51_Mdot_${Mdot}_Mach_${Mach}_t_${tmax}_jobscript_test_DIR
	txtfilename=Lnu_${Lnu[index-1]}e51_Mdot_${Mdot}_Mach_${Mach}_RPNS_${RPNS}km.txt
	gifname=Lnu_${Lnu[index-1]}_Mdot_${Mdot}_Mach_${Mach}
	# Loading up IC file
	if ${RPNS30km}; then
		mkdir ${dataDIR1}
		mkdir ${dataDIR1}/${dataDIR_Mach}
		mkdir ${dataDIR1}/${dataDIR_Mach}/${dataDIR_Mdot}
		mkdir ${dataDIR1}/${dataDIR_Mach}/${dataDIR_Mdot}/${dataDIR_Lnu}
		dataDIR=${dataDIR1}/${dataDIR_Mach}/${dataDIR_Mdot}/${dataDIR_Lnu}
		BEGINdatadir=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/1D_OUTPUT_DIR
		ICdir=${BEGINdatadir}/Mach_${Mach}_DIR/Mdot_${Mdot}_DIR/Lnu_${Lnu[index-1]}_DIR/Lnu_${Lnu[index-1]}e51_Mdot_${Mdot}_Mach_${Mach}_DIR
		ICtarfile=${ICdir}/Lnu_${Lnu[index-1]}_Mdot_${Mdot}_Mach_${Mach}_RPNS_${RPNS}km.tar.gz
		tar -xzvf ${ICtarfile}
		python athdf2txt.py ${Lnu[index-1]} ${filenumber} ${Mdot} ${pythondir} ${Mach} ${RPNS}
		mv ${txtfilename} ${txtfile_DIR}/
		txtfile=${txtfile_DIR}/${txtfilename}
		rm -rf accretion.*
	else
		mkdir ${dataDIR1_RPNS}
		mkdir ${dataDIR1_RPNS}/${dataDIR_Mach}
		mkdir ${dataDIR1_RPNS}/${dataDIR_Mach}/${dataDIR_Mdot}
		mkdir ${dataDIR1_RPNS}/${dataDIR_Mach}/${dataDIR_Mdot}/${dataDIR_Lnu}
		mkdir ${dataDIR1_RPNS}/${dataDIR_Mach}/${dataDIR_Mdot}/${dataDIR_Lnu}/${dataDIR_RPNS}
		dataDIR=${dataDIR1_RPNS}/${dataDIR_Mach}/${dataDIR_Mdot}/${dataDIR_Lnu}/${dataDIR_RPNS}
		BEGINdatadir=/users/PAS2055/dpochik/test/athena_CURRENT_WORKING_DIRECTORY_DIR/athena_WORKING_DIR/1D_OUTPUT_RPNS_DIR
		ICdir=${BEGINdatadir}/Mach_${Mach}_DIR/Mdot_${Mdot}_DIR/Lnu_${Lnu[index-1]}_DIR/RPNS_${RPNS}_DIR/Lnu_${Lnu[index-1]}e51_Mdot_${Mdot}_Mach_${Mach}_DIR
		ICtarfile=${ICdir}/Lnu_${Lnu[index-1]}_Mdot_${Mdot}_Mach_${Mach}_RPNS_${RPNS}km.tar.gz
		tar -xzvf ${ICtarfile}
		python athdf2txt.py ${Lnu[index-1]} ${filenumber} ${Mdot} ${pythondir} ${Mach} ${RPNS}
		mv ${txtfilename} ${txtfile_DIR}/
		txtfile=${txtfile_DIR}/${txtfilename}
		rm -rf accretion.*
	fi		
	###################################################
	### CREATING BC VALUES ############################
	###################################################
	python r_logscale.py ${rMin} ${rMax} ${nR} ${pythondir}
	rScale=$(awk -F" " '{print $1}' r_scale.txt)
	IC_trim_firstrow=$(sed '1!d' ${txtfile})
	IC_trim_lastrow=$(sed '$!d' ${txtfile})
	echo $IC_trim_firstrow > IC_trim_firstrow.txt
	echo $IC_trim_lastrow > IC_trim_lastrow.txt
	cat IC_trim_firstrow.txt
	cat IC_trim_lastrow.txt
	IC_vE=$(awk -F" " '{print $3}' IC_trim_lastrow.txt)
	python Mdot_rhof_calculator_NEW.py ${Mdot} ${IC_vE} ${rMax} ${pythondir}
	IC_RhoB=$(awk -F" " '{print $2}' IC_trim_firstrow.txt)
	IC_RhoE=$(awk -F" " '{print $1}' rho_f_${Mdot}.txt)
	mkdir ${DIR} 
	mv IC_trim_firstrow.txt IC_trim_lastrow.txt rho_f_${Mdot}.txt r_scale.txt ${DIR}
	cp ${athinput} ${DIR}
	cp ${jobscript} ${DIR} 
	cp ${txtfile} ${DIR}
	mpiexec -n ${cores} bin/athena -i ${DIR}/${athinput} ${DIR}/${txtfile} problem/rho_f=${IC_RhoE} problem/rho_0=${IC_RhoB} problem/v_f=${IC_vE} problem/MachNumber=${Mach} time/tlim=${tmax} output1/dt=${d_t} output2/dt=${d_t} output4/dt=${d_t} mesh/x1min=${rMin} mesh/x1max=${rMax} mesh/nx1=${nR} mesh/nx2=${nTheta} mesh/x1rat=${rScale} hydro/eos_file_name=${eos_dir} problem/L_nubar=${Lnu[index-1]} problem/L_nu=${Lnu[index-1]} problem/file=${txtfile} meshblock/nx1=${nCell_r} meshblock/nx2=${nCell_theta} -d ${DIR}
	###################################################
	### STORING DATA ##################################
	###################################################
	tarname=${DIR}.tar.gz
	tar -zcvf ${tarname} ${DIR}/accretion.*
	mv ${tarname} ${DIR}/
	###################################################
	### PLOTTING DATA #################################
	###################################################
	mpirun -n ${nRank} python mpipyscript_FIXED.py ${DIR} ${minI} ${maxI} ${nTheta} ${nR} ${tmax} ${rMax} ${gifname} ${Mdot} ${pythondir} ${Mach} ${SrMax} ${imod_input}
	python gif2mp4.py ${gifname}_entropy_vr
	python gif2mp4.py ${gifname}_Gamma_T
	python gif2mp4.py ${gifname}_Tadv_Theat
	python gif2mp4.py ${gifname}_Multipanel
	python gif2mp4.py ${gifname}_entropy_vr_SrMax
	python gif2mp4.py ${gifname}_Entropy_theta_avg
	tar -zcvf ${DIR}_PLOTS.tar.gz *.gif *.mp4 *.png	
	python calculate_vr_outer.py ${DIR} ${endfnumber} ${pythondir}
	FC_vE_FLAG=$(awk -F" " '{print $1}' vr_FLAG.txt)
	echo FC_vE_FLAG = ${FC_vE_FLAG}
	mv vr_FLAG.txt ${DIR}
	mv *.gif *.mp4 *.png ${DIR}
	mv ${DIR}_PLOTS.tar.gz ${DIR}
	rm -rf ${DIR}/accretion.*
	cp ${outputfile_DIR}/slurm* ${DIR}
	rm -rf ${dataDIR}/*
	mv ${DIR} ${dataDIR}
	rm -rf ${DIR}/accretion.*	
	echo 'copy output file into out_DIR/'	
	if [ $FC_vE_FLAG -eq 1 ]; then
		echo "Vr>0.0 detected! Ending script."	
		echo Lnu = ${Lnu[index-1]}
		break
	fi
	((index++))
done
echo 'SUCCESS (MAYBE)'
